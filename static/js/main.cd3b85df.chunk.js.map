{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","href","websiteUrl","target","rel","src","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","handleEnterSearch","sortByOptions","sortByOption","setState","submitSearch","event","value","preventDefault","Object","keys","sortValue","onClick","handleSortByChange","onKeyPress","renderSortByOption","placeholder","onChange","Yelp","search","endpoint","fetch","headers","Authorization","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","image_url","address1","zip_code","categories","title","review_count","url","catch","error","App","searchYelp","React","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TA+BeA,G,yLAzBP,IAAMC,EAAWC,KAAKC,MAAMF,SAE5B,OACI,yBAAKG,UAAU,YACX,yBAAKA,UAAU,mBACX,uBAAGC,KAAMJ,EAASK,WAAYC,OAAO,SAASC,IAAI,uBAAsB,yBAAKC,IAAKR,EAASS,SAAUC,IAAI,OAE7G,4BAAKV,EAASW,MACd,yBAAKR,UAAU,wBACX,yBAAKA,UAAU,oBACX,2BAAIH,EAASY,SACb,2BAAIZ,EAASa,MACb,2BAAIb,EAASc,MAAQ,IAAMd,EAASe,UAExC,yBAAKZ,UAAU,oBACX,4BAAKH,EAASgB,UACd,wBAAIb,UAAU,UAAUH,EAASiB,OAAjC,UACA,2BAAIjB,EAASkB,YAAb,mB,GAnBDC,cCeRC,E,uKAbP,OACI,yBAAKjB,UAAU,gBAEPF,KAAKC,MAAMmB,WAAWC,KAAI,SAAAtB,GACtB,OAAO,kBAAC,EAAD,CAAUuB,IAAKvB,EAASwB,GAAIxB,SAAUA,Y,GAN1CmB,aCgFZM,G,wDAhFX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IAEDY,MAAQ,CACTY,KAAM,GACNC,SAAU,GACVC,OAAQ,cAGZ,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,kBAAoB,EAAKA,kBAAkBH,KAAvB,gBAEzB,EAAKI,cAAgB,CACjB,aAAc,aACd,gBAAiB,SACjB,gBAAiB,gBAjBN,E,+DAsBAC,GACflC,KAAKmC,SAAS,CACVR,OAAQO,IAEZlC,KAAKC,MAAMmC,aAAapC,KAAKa,MAAMY,KAAMzB,KAAKa,MAAMa,SAAU1B,KAAKa,MAAMc,U,uCAG5DU,GACbrC,KAAKmC,SAAS,CACVV,KAAMY,EAAMhC,OAAOiC,U,2CAIND,GACjBrC,KAAKmC,SAAS,CACVT,SAAUW,EAAMhC,OAAOiC,U,mCAIlBD,GACTrC,KAAKC,MAAMmC,aAAapC,KAAKa,MAAMY,KAAMzB,KAAKa,MAAMa,SAAU1B,KAAKa,MAAMc,QACzEU,EAAME,mB,wCAGQF,GACI,UAAdA,EAAMf,KACNtB,KAAKC,MAAMmC,aAAapC,KAAKa,MAAMY,KAAMzB,KAAKa,MAAMa,SAAU1B,KAAKa,MAAMc,U,2CAI3D,IAAD,OACjB,OAAOa,OAAOC,KAAKzC,KAAKiC,eAAeZ,KAAI,SAAAC,GACvC,IAAIoB,EAAY,EAAKT,cAAcX,GAEnC,OAAO,wBAAIpB,UAAWwC,IAAc,EAAK7B,MAAMc,OAAS,SAAW,GAAIL,IAAKoB,EAAWC,QAAS,EAAKC,mBAAmBf,KAAK,EAAMa,IAAapB,Q,+BAKpJ,OACI,yBAAKuB,WAAY7C,KAAKgC,kBAAmB9B,UAAU,aAC/C,yBAAKA,UAAU,0BACX,4BACKF,KAAK8C,uBAGd,yBAAK5C,UAAU,oBACX,2BAAO6C,YAAY,oBAAoBC,SAAUhD,KAAK4B,mBACtD,2BAAOmB,YAAY,SAASC,SAAUhD,KAAK8B,wBAE/C,yBAAK5B,UAAU,oBACX,uBAAGyC,QAAS3C,KAAK+B,cAAjB,kB,GA1EIb,cC4CT+B,EA7CF,CAITC,OAJS,SAIFzB,EAAMC,EAAUC,GACnB,IAAMwB,EAAQ,yDAAqD1B,EAArD,qBAAsEC,EAAtE,oBAA0FC,GAGxG,OAAOyB,MAFM,uCAEOD,EAAU,CAC1BE,QAAS,CACLC,cAAc,UAAD,OAZd,uIAeFC,MAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGpB,MAAM,IAAIC,MAAM,qBACjB,SAAAC,GACCC,QAAQC,IAAIF,EAAaG,YAC5BR,MAAK,SAAAS,GACF,GAAIA,EAAa5C,WACb,OAAO4C,EAAa5C,WAAWC,KAAI,SAAAtB,GAE/B,MAAO,CACHwB,GAAIxB,EAASwB,GACbf,SAAUT,EAASkE,UACnBvD,KAAMX,EAASW,KACfC,QAASZ,EAAS2B,SAASwC,SAC3BtD,KAAMb,EAAS2B,SAASd,KACxBC,MAAOd,EAAS2B,SAASb,MACzBC,QAASf,EAAS2B,SAASyC,SAC3BpD,SAAUhB,EAASqE,WAAW,GAAGC,MACjCrD,OAAQjB,EAASiB,OACjBC,YAAalB,EAASuE,aACtBlE,WAAYL,EAASwE,WAKpCC,OAAM,SAAAC,GAAK,OAAIZ,QAAQY,MAAMA,EAAMV,cCHjCW,E,kDAhCb,WAAYzE,GAAQ,IAAD,8BACjB,cAAMA,IAEDY,MAAQ,CACXO,WAAY,IAGd,EAAKuD,WAAa,EAAKA,WAAW9C,KAAhB,gBAPD,E,uDAURJ,EAAMC,EAAUC,GAAS,IAAD,OAC7BF,GAAQC,GACVuB,EAAKC,OAAOzB,EAAMC,EAAUC,GACzB4B,MAAK,SAAAnC,GACJ,EAAKe,SAAS,CACZf,WAAYA,S,+BAOpB,OACE,yBAAKlB,UAAU,OACb,wCACA,kBAAC,EAAD,CAAWkC,aAAcpC,KAAK2E,aAC9B,kBAAC,EAAD,CAAcvD,WAAYpB,KAAKa,MAAMO,kB,GA3B3BwD,IAAM1D,WCKJ2D,QACW,cAA7BC,OAAOpD,SAASqD,UAEe,UAA7BD,OAAOpD,SAASqD,UAEhBD,OAAOpD,SAASqD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdlB,OAAM,SAAAC,GACLZ,QAAQY,MAAMA,EAAMV,c","file":"static/js/main.cd3b85df.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./Business.css\";\r\n\r\n\r\nclass Business extends Component {\r\n    render() {\r\n        const business = this.props.business;\r\n        \r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <a href={business.websiteUrl} target='_blank' rel=\"noopener noreferrer\"><img src={business.imageSrc} alt='' /></a>\r\n                </div>\r\n                <h2>{business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{business.address}</p>\r\n                        <p>{business.city}</p>\r\n                        <p>{business.state + ' ' + business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{business.category}</h3>\r\n                        <h3 className=\"rating\">{business.rating} stars</h3>\r\n                        <p>{business.reviewCount} reviews</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Business;","import React, { Component } from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business'\r\n\r\nclass BusinessList extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {\r\n                    this.props.businesses.map(business => {\r\n                        return <Business key={business.id} business={business} />\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BusinessList;","import React, { Component } from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n        };\r\n\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.handleEnterSearch = this.handleEnterSearch.bind(this);\r\n\r\n        this.sortByOptions = {\r\n            'Best Match': 'best_match',\r\n            'Highest Rated': 'rating',\r\n            'Most Reviewed': 'review_count'\r\n        };\r\n\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({\r\n            sortBy: sortByOption\r\n        });\r\n        this.props.submitSearch(this.state.term, this.state.location, this.state.sortBy);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({\r\n            term: event.target.value\r\n        });\r\n    }\r\n\r\n    handleLocationChange(event) {\r\n        this.setState({\r\n            location: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSearch(event) {\r\n        this.props.submitSearch(this.state.term, this.state.location, this.state.sortBy);\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleEnterSearch(event) {\r\n        if (event.key === 'Enter') {\r\n            this.props.submitSearch(this.state.term, this.state.location, this.state.sortBy);\r\n        }\r\n    }\r\n\r\n    renderSortByOption() {\r\n        return Object.keys(this.sortByOptions).map(key => {\r\n            let sortValue = this.sortByOptions[key];\r\n\r\n            return <li className={sortValue === this.state.sortBy ? 'active' : ''} key={sortValue} onClick={this.handleSortByChange.bind(this, sortValue)}>{key}</li>\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onKeyPress={this.handleEnterSearch} className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.renderSortByOption()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input placeholder=\"Search Businesses\" onChange={this.handleTermChange} />\r\n                    <input placeholder=\"Where?\" onChange={this.handleLocationChange} />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <a onClick={this.handleSearch} >Let's Go</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","const apiKey = '8IuCgthUU9uYtzkkKjIoH9US_e_Zfj0fp8k9zOe9lHeYkqsZ67HJekwTkAxxscdsKxTGbc6cJg1Ta5wPqNzRmvkprHOE7fQh2XzJfXPwAPVfA2JMwytXI1K9MPhsX3Yx';\r\n\r\nconst Yelp = {\r\n\r\n\r\n\r\n    search(term, location, sortBy) {\r\n        const endpoint = `https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`;\r\n        const cors = 'https://cors-anywhere.herokuapp.com/';\r\n        \r\n        return fetch(cors + endpoint, {\r\n            headers: {\r\n                Authorization: `Bearer ${apiKey}`\r\n            }\r\n        })\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n\r\n                throw new Error('Request failed');\r\n            }, networkError => {\r\n                console.log(networkError.message)})\r\n            .then(jsonResponse => {\r\n                if (jsonResponse.businesses) {\r\n                    return jsonResponse.businesses.map(business => {\r\n                        \r\n                        return {\r\n                            id: business.id,\r\n                            imageSrc: business.image_url,\r\n                            name: business.name,\r\n                            address: business.location.address1,\r\n                            city: business.location.city,\r\n                            state: business.location.state,\r\n                            zipCode: business.location.zip_code,\r\n                            category: business.categories[0].title,\r\n                            rating: business.rating,\r\n                            reviewCount: business.review_count,\r\n                            websiteUrl: business.url\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => console.error(error.message));\r\n    }\r\n}\r\n\r\nexport default Yelp;","import React from 'react';\r\nimport './App.css';\r\nimport BusinessList from '../BusinessList/BusinessList';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport Yelp from '../../util/yelp'\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      businesses: []\r\n    };\r\n\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n\r\n  searchYelp(term, location, sortBy) {\r\n    if (term && location) {\r\n      Yelp.search(term, location, sortBy)\r\n        .then(businesses => {\r\n          this.setState({\r\n            businesses: businesses\r\n          })\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>ravenous</h1>\r\n        <SearchBar submitSearch={this.searchYelp} />\r\n        <BusinessList businesses={this.state.businesses} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}